name: 'C++ CI'

on:
  push:
    branches:
      - main
      - feature/github_actions

permissions:
  contents: write  # Права на запись для удаления тегов и релизов

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Install dependencies on Linux
        if: ${{ runner.os == 'Linux' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y libboost-test-dev

      - name: Install dependencies on macOS
        if: ${{ runner.os == 'macOS' }}
        run: |
          brew update
          brew install boost

      - name: Configure with CMake
        run: |
          cmake . -DPATCH_VERSION=${{ github.run_number }}

      - name: Build the project
        run: |
          cmake --build .

      - name: Run tests
        run: |
          cmake --build . --target test

      - name: Create package
        run: |
          cmake --build . --target package

      - name: Delete existing release and tag if they exist
        run: |
          # Check if the release and tag exist and delete them if they do
          RELEASE_ID=$(gh api -X GET "repos/${{ github.repository }}/releases/tags/${{ github.run_number }}" --jq '.id' || echo "")
          if [ -n "$RELEASE_ID" ]; then
            echo "Deleting existing release with ID $RELEASE_ID"
            gh api -X DELETE "repos/${{ github.repository }}/releases/$RELEASE_ID"
          fi
          # Delete the tag if it exists
          if git rev-parse -q --verify "refs/tags/${{ github.run_number }}"; then
            git tag -d ${{ github.run_number }}
            git push origin :refs/tags/${{ github.run_number }}
          else
            echo "Tag does not exist. Proceeding with release creation."
          fi

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Убедитесь, что токен указан правильно
        with:
          tag_name: ${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
          draft: false
          prerelease: false

      - name: Upload Release Asset (Linux)
        if: ${{ runner.os == 'Linux' }}
        id: upload-linux
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./helloworld-0.0.${{ github.run_number }}-Linux.deb
          asset_name: helloworld-0.0.${{ github.run_number }}-Linux.deb
          asset_content_type: application/vnd.debian.binary-package

      - name: Upload Release Asset (macOS)
        if: ${{ runner.os == 'macOS' }}
        id: upload-macos
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./helloworld-0.0.${{ github.run_number }}-Darwin.dmg  # Исправлено на .dmg
          asset_name: helloworld-0.0.${{ github.run_number }}-Darwin.dmg    # Исправлено на .dmg
          asset_content_type: application/x-apple-diskimage  # MIME-тип для .dmg
